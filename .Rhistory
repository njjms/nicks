threshold <- n*p_flip
threshold
pbinom(threshold, size=n, prob=p_flip)
sum(dbinom(0:threshold, size=n, prob=p_flip))
dbinom(0:threshold, size=n, prob=p_flip)
length(dbinom(0:threshold, size=n, prob=p_flip))
sum(dbinom(0:threshold, size=n, prob=p_flip))
p_flip <- .01
n <- seq(100, 1000, by=10)
threshold <- n*p_flip
threshold
sum(dbinom(0:threshold, size=n, prob=p_flip))
sapply(threshold, FUN = function(t) sum(dbinom(0:t, size=n, prob=p_flip)))
sapply(list(n=n, t=t), FUN = function(n, t) sum(dbinom(0:t, size=n, prob=p_flip)))
sapply(list(n=n, t=threshold), FUN = function(n, t) sum(dbinom(0:t, size=n, prob=p_flip)))
threshold <- n*p_flip
length(n)
length(threshold)
list(n=n, t=threshold)
sapply(list(n=n, t=threshold), FUN = sum(dbinom(0:t, size=n, prob=p_flip)))
list(n=n, t=threshold)
sapply(list(n=n, t=threshold), FUN = function(n, t) sum(dbinom(0:t, size=n, prob=p_flip)))
mapply(list(n=n, t=threshold), FUN = function(n, t) sum(dbinom(0:t, size=n, prob=p_flip)))
library(purrr)
map2(n, threshold, ~ sum(dbinom(0:.threshold, size=.n, prob=p_flip)))
12531-12542
11/12542
100*(11/12542)
dbinom(10:11, size=11, prob=.8, lower.tail = FALSE)
dbinom(10:11, size=11, prob=.8)
sum(dbinom(10:11, size=11, prob=.8))
sum(dbinom(10, size=11, prob=.8))
sum(dbinom(55:59, size=59, prob=.8))
sum(dbinom(9:11, size=11, prob=.8))
sum(dbinom(49:57, size=57, prob=.8))
sum(dbinom(10:12, size=12, prob=.8))
dbinom(55:59, size=59, prob=.8)
setwd("~/Documents/panorama/high_risk_dnn/hr_dnn_validation_analysis")
blinded_data_arm1 <- read_csv("hr_dnn_results_arm1.csv")
blinded_data_arm2 <- read_csv("hr_dnn_results_arm2.csv")
blinded_data_arm3 <- read_csv("hr_dnn_results_arm3.csv")
blinded_data_arm3_hr_dnn_off <- read_csv("HR_DNN_22q_Validation_Results_Blinded_Arm3_redux.csv")
# Column names
colnames(blinded_data_arm1)
colnames(blinded_data_arm2)
# Overall counts - 12760 confirmed negative samples, 12 positive samples
table(blinded_data_arm1$clinical_truth)
# Overall calls - 12544 calls for specificity, 11 calls for sensitivity
# 216 NCs for specificity, 1 NO_RESULT for sensitivity
table(blinded_data_arm1$clinical_truth,
blinded_data_arm1$pano_final_call)
specificity_total_calls <- 12531 + 13
sensitivity_total_calls <- 11
#
# Reporting No-Calls
#
blinded_data_arm1 %>%
filter(blinded_case_id %in% c(9500780, 8249902)) %>%
select(clinical_truth, pano_final_call)
blinded_data_arm1 %>%
filter(pano_final_call %in% c("NO_CALL_QC_FAILURE")) %>%
select(QC_exclusion) %>%
table() %>% sort()
blinded_data_arm1 %>%
filter(pano_final_call %in% c("NO_CALL_RE_PCR")) %>%
pull(blinded_case_id) %>%
paste(., collapse=",")
blinded_data_arm1 %>%
filter(QC_exclusion %in% c("LAB_ERROR")) %>%
pull(blinded_case_id) %>% paste(., collapse = ",")
#
# Specificity calculation
# Edge cases:
#   - 9500780 has a confirmed partial deletion 409kb (< 500kB)
#   - 8249902 mother may have had deletion (potential exclusion)
clopper_pearson(x=12531, n=specificity_total_calls-2, conf.level=.90)
#
# Specificity calculation
# Edge cases:
#   - 9500780 has a confirmed partial deletion 409kb (< 500kB)
#   - 8249902 mother may have had deletion (potential exclusion)
clopper_pearson(x=12531, n=specificity_total_calls-2, conf.level=.90)
clopper_pearson(x=12531, n=specificity_total_calls-2, conf.level=.95)
12531/12542
#
# Sensitivity calculation
# Edge cases:
#   - 9712596 was previously run on Pano V2 and was not salvageable
clopper_pearson(x=10, n=sensitivity_total_calls, conf.level=.9)
clopper_pearson(x=10, n=sensitivity_total_calls, conf.level=.95)
colnames(blinded_data_arm3)
table(blinded_data_arm3$deletion_source)
blinded_data_arm3 %>%
filter(report_CFE <= .065 & deletion_source %in% c("maternal", "mother_has_deletion") )
table(blinded_data_arm3$report_CFE)
shiny::runApp('~/Documents/power_calculator/power_calculator')
runApp('~/Documents/power_calculator/power_calculator')
runApp('~/Documents/power_calculator/power_calculator')
runApp('~/Documents/power_calculator/power_calculator')
runApp('~/Documents/power_calculator/power_calculator')
runApp('~/Documents/power_calculator/power_calculator')
runApp('~/Documents/power_calculator/power_calculator')
runApp('~/Documents/power_calculator/power_calculator')
runApp('~/Documents/power_calculator/power_calculator')
runApp('~/Documents/power_calculator/power_calculator')
runApp('~/Documents/power_calculator/power_calculator')
runApp('~/Documents/power_calculator/power_calculator')
runApp('~/Documents/power_calculator/power_calculator')
runApp('~/Documents/power_calculator/power_calculator')
runApp('~/Documents/power_calculator/power_calculator')
runApp()
runApp('~/Documents/power_calculator/power_calculator')
runApp('~/Documents/power_calculator/power_calculator')
runApp('~/Documents/power_calculator/power_calculator')
runApp('~/Documents/power_calculator/power_calculator')
runApp('~/Documents/power_calculator/power_calculator')
runApp('~/Documents/power_calculator/power_calculator')
getRversion()
devtools::install_git("ssh://git@stash.natera.com:7999/~nsun/biostatslib.git")
library(biostatslib)
?biostatslib::power_calc()
devtools::test()
devtools::test()
clopper_pearson(x = 0, n=10)
PropCIs::exactci(x = 0, n= 10)
PropCIs::exactci(x = 0, n= 10, conf.level =.95)
round(PropCIs::exactci(x = 0, n= 10, conf.level =.95)$conf.int[2], 4)
clopper_pearson(x = 0, n=10)
devtools::test()
power_calc(sample_size = 100
true_prob = .90,
requirement = .95,
requirement_type = "gt",
alpha = .05,
interval_type = "ws",
AC_type = "medium")$power
power_calc(sample_size = 100,
true_prob = .90,
requirement = .95,
requirement_type = "gt",
alpha = .05,
interval_type = "ws",
AC_type = "medium")$power
power_calc(sample_size = 100,
true_prob = .90,
requirement = .95,
requirement_type = "gt",
alpha = .05,
interval_type = "ws",
AC_type = "medium")$df
power_calc(sample_size = 100,
true_prob = .90,
requirement = .95,
requirement_type = "gt",
alpha = .05,
interval_type = "ws",
AC_type = "medium")$power
sum(subset(power_calc(sample_size = 100,
true_prob = .90,
requirement = .95,
requirement_type = "gt",
alpha = .05,
interval_type = "ws",
AC_type = "medium")$df, pass == 1)$prob),
test_that("power_calc with \"low\" risk reports correct values", {
expect_equal(clopper_pearson(x = 0,
n = 10,
conf.level = .95)$lower,
0)
})
sum(subset(power_calc(sample_size = 100,
true_prob = .90,
requirement = .95,
requirement_type = "gt",
alpha = .05,
interval_type = "ws",
AC_type = "medium")$df, pass == 1)$prob)
sum(subset(power_calc(sample_size = 100,
true_prob = .90,
requirement = .95,
requirement_type = "gt",
alpha = .05,
interval_type = "ws",
AC_type = "medium")$df, pass == 0)$prob)
power_calc(sample_size = 100,
true_prob = .90,
requirement = .95,
requirement_type = "gt",
alpha = .05,
interval_type = "ws",
AC_type = "medium")$power
power_calc(sample_size = 100,
true_prob = .90,
requirement = .95,
requirement_type = "gt",
alpha = .05,
interval_type = "ws",
AC_type = "medium")$power -> a1
sum(subset(power_calc(sample_size = 100,
true_prob = .90,
requirement = .95,
requirement_type = "gt",
alpha = .05,
interval_type = "ws",
AC_type = "medium")$df, pass == 0)$prob) -> a2
a1 == a2
expect_equal(
nrow(subset(power_calc(sample_size = 100,
true_prob = .90,
requirement = .95,
requirement_type = "gt",
alpha = .05,
interval_type = "ws",
AC_type = "medium")$df, pass == 1)),
length(95:100)
)
#> Test passed
length(95:100)
nrow(subset(power_calc(sample_size = 100,
true_prob = .90,
requirement = .95,
requirement_type = "gt",
alpha = .05,
interval_type = "ws",
AC_type = "medium")$df, pass == 1))
#> Test passed
nrow(subset(power_calc(sample_size = 100,
true_prob = .90,
requirement = .95,
requirement_type = "gt",
alpha = .05,
interval_type = "ws",
AC_type = "low")$df, pass == 1))
AC_type = "low")$df
#> Test passed
power_calc(sample_size = 100,
true_prob = .90,
requirement = .95,
requirement_type = "gt",
alpha = .05,
interval_type = "ws",
AC_type = "low")$df
power_calc(sample_size = 100,
true_prob = .90,
requirement = .95,
requirement_type = "gt",
alpha = .05,
interval_type = "ws",
AC_type = "high")$df
power_calc(sample_size = 100,
true_prob = .90,
requirement = .95,
requirement_type = "gt",
alpha = .05,
interval_type = "ws",
AC_type = "high")$power
expect_equal(
nrow(subset(power_calc(sample_size = 100,
true_prob = .90,
requirement = .95,
requirement_type = "gt",
alpha = .05,
interval_type = "ws",
AC_type = "low")$df, pass == 1)),
length(c(100))
)
length(c(100))
PropCIs::exactci(x=99, n=100, conf.level=.95)
PropCIs::exactci(x=100, n=100, conf.level=.95)
power_calc(sample_size = 100,
true_prob = .90,
requirement = .95,
requirement_type = "gt",
alpha = .05,
interval_type = "ws",
AC_type = "high")$df
power_calc(sample_size = 100,
true_prob = .90,
requirement = .92,
requirement_type = "gt",
alpha = .05,
interval_type = "ws",
AC_type = "high_delta",
)$df
power_calc(sample_size = 100,
true_prob = .90,
requirement = .92,
requirement_type = "gt",
alpha = .05,
interval_type = "ws",
AC_type = "high_delta",
prq_delta = .90)$df
power_calc(sample_size = 100,
true_prob = .90,
requirement = .92,
requirement_type = "gt",
alpha = .05,
interval_type = "ws",
AC_type = "high_delta",
prq_delta = .90)$df
power_calc(sample_size = 100,
true_prob = .90,
requirement = .92,
requirement_type = "gt",
alpha = .05,
interval_type = "ws",
AC_type = "high_delta")$df
power_calc(sample_size = 100,
true_prob = .90,
requirement = .92,
requirement_type = "gt",
alpha = .05,
interval_type = "ws",
AC_type = "high_delta",
prq_delta = .90)$df
devtools::test()
#> Test passed
power_calc(sample_size = 100,
true_prob = .90,
requirement = .95,
requirement_type = "gt",
alpha = .05,
interval_type = "ws",
AC_type = "low")$df
#> Test passed
power_calc(sample_size = 100,
true_prob = .90,
requirement = .95,
requirement_type = "gt",
alpha = .05,
interval_type = "ws",
AC_type = "high")$df
devtools::test()
devtools::test()
#> Test passed
power_calc(sample_size = 100,
true_prob = .05,
requirement = .039,
requirement_type = "lt",
alpha = .05,
interval_type = "ws",
AC_type = "medium")
power_calc(sample_size = 100,
true_prob = .05,
requirement = .039,
requirement_type = "lt",
alpha = .05,
interval_type = "ws",
AC_type = "low")
power_calc(sample_size = 100,
true_prob = .05,
requirement = .039,
requirement_type = "lt",
alpha = .05,
interval_type = "ws",
AC_type = "high")
power_calc(sample_size = 100,
true_prob = .05,
requirement = .039,
requirement_type = "lt",
alpha = .05,
interval_type = "ws",
AC_type = "high_delta",
prq_delta = .06)
devtools::test()
96/8
120/8
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
c <- function(x){
# if (x > 0.8){
#   r <- exp(-(0.2)^(-4))
# } else {
#   r <- exp(-(1-x)^(-4))
# }
r <- ifelse(x>0.8, exp(-(0.25)^(-4)), exp(-(1-x)^(-4)))
return(r)
}
h <- function(x){
if (x > -1 && x < 1){
r <- 3*(1-x^2)/4
} else {
return(0)
}
return(r)
}
f <- function(x,t){
if (x > -1 && x < 1){
r <- t/2 + (1-t)/c(t)*h((x-t)/c(t))
} else {
r <- (1-t)/c(t)*h((x-t)/c(t))
}
return(r)
}
## Generate y from Unif(0,1)
theta <- 0.2
n1 <- 50
n2 <- 250
n3 <- 500
y1 <- runif(n1)
y2 <- runif(n2)
y3 <- runif(n3)
x1 <-rep(0, n1)
x2 <- rep(0,n2)
x3 <- rep(0,n3)
#theta_seq <- seq(0.001, 0.999, 0.001)
#lf1 <- rep(0, length(x1))
#lf2 <- rep(0, length(x2))
#lf3 <- rep(0, length(x3))
for (i in 1:n1) {
if (y1[i] <= theta){
x1[i] <- runif(1, min = -1, max = 1)
} else {
a <- rbeta(1, shape1 = 2, shape2 = 2)
z <- 1 - 2*a
x1[i] <- theta + exp(-(1-theta)^(-4))*z
}
}
for (i in 1:n2) {
if (y2[i] <= theta){
x2[i] <- runif(1, min = -1, max = 1)
} else {
a <- rbeta(1, shape1 = 2, shape2 = 2)
z <- 1 - 2*a
x2[i] <- theta + exp(-(1-theta)^(-4))*z
}
}
for (i in 1:n3) {
if (y3[i] <= theta){
x3[i] <- runif(1, min = -1, max = 1)
} else {
a <- rbeta(1, shape1 = 2, shape2 = 2)
z <- 1 - 2*a
x3[i] <- theta + exp(-(1-theta)^(-4))*z
}
}
x1 <- subset(x1, x1 > 0 & x1 < 1)
lf1 <- rep(0, length(x1))
for (i in 1:length(x1)) {
su <- 0
for (j in 1:length(x1)) {
lf1[i] <- su + log(f(x=x1[j], t=x1[i]))
}
}
x2 <- subset(x2, x2 > 0 & x2 < 1)
lf2 <- rep(0, length(x2))
for (i in 1:length(x2)) {
su <- 0
for (j in 1:length(x2)) {
lf2[i] <- su + log(f(x=x2[j], t=x2[i]))
}
}
x3 <- subset(x3, x3 > 0 & x3 < 1)
lf3 <- rep(0, length(x3))
for (i in 1:length(x3)) {
su <- 0
for (j in 1:length(x3)) {
lf3[i] <- su + log(f(x=x3[j], t=x3[i]))
}
}
plot(x1, lf1,
main = paste("sample size n = ", n1, sep = " "),
ylab = "likelihood",
xlab = "sample")
plot(x2, lf2,
main = paste("sample size n = ", n2, sep = " "),
ylab = "likelihood",
xlab = "sample")
plot(x3, lf3,
main = paste("sample size n = ", n3, sep = " "),
ylab = "likelihood",
xlab = "sample")
(mle1 <- x1[which.max(lf1)])
(mle2 <- x2[which.max(lf2)])
(mle3 <- x3[which.max(lf3)])
n <- c(50, 250, 500)
plot(x3, lf3,
main = paste("sample size n = ", n3, sep = " "),
ylab = "likelihood",
xlab = "sample")
(mle1 <- x1[which.max(lf1)])
(mle2 <- x2[which.max(lf2)])
(mle3 <- x3[which.max(lf3)])
n <- c(50, 250, 500)
View(c)
runApp('~/Documents/power_calculator/power_calculator')
runApp('~/Documents/power_calculator/power_calculator')
runApp('~/Documents/power_calculator/power_calculator')
runApp('~/Documents/power_calculator/power_calculator')
install.packages("DT")
install.packages("DT")
install.packages("shinydashboard")
biostatslib::power_calc()
shiny::runApp('~/Documents/power_calculator/power_calculator')
devtools::install_git("ssh://git@stash.natera.com:7999/~nsun/biostatslib.git")
.rs.restartR()
library(biostatslib)
biostatslib::power_calc(sample_size = 100, true_prob = .90, requirement = .95,)
biostatslib::power_calc(sample_size = 100, true_prob = .90, requirement = .95, alpha = .05)
runApp('~/Documents/power_calculator/power_calculator')
install.packages("shinyWidgets")
install.packages("shinyWidgets")
packageVersion()
install.packages("renv")
library(renv)
snapshot()
snapshot()
installed.packages()
ip = as.data.frame(installed.packages()[,c(1,3:4)])
ip = ip[is.na(ip$Priority),1:2,drop=FALSE]
ip
install.packages("shiny")
