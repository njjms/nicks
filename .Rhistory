labs(title="Detecting Deviation in Sensitivity from p=.998", x="n", y="Power") +
theme_bw()
ggplot(
data.frame(
n = possible_sample_sizes,
sens_995_power=sens_calculations_2[[5]],
sens_990_power=sens_calculations_2[[1]],
sens_985_power=sens_calculations_2[[2]],
sens_980_power=sens_calculations_2[[3]],
sens_998_power=sens_calculations_2[[4]]
)) +
geom_line(mapping=aes(x=n, y=sens_990_power,
color = "true_sens_990")) +
geom_line(mapping=aes(x=n, y=sens_985_power,
color = "true_sens_985")) +
geom_line(mapping=aes(x=n, y=sens_980_power,
color = "true_sens_980")) +
geom_line(mapping=aes(x=n, y=sens_998_power,
color = "true_sens_998")) +
geom_line(mapping=aes(x=n, y=sens_995_power,
color = "true_sens_995")) +
scale_color_manual(name="True Sensitivty",
values = c(true_sens_990="dodgerblue1",
true_sens_985="firebrick",
true_sens_995="pink",
true_sens_998="darkorange",
true_sens_980="forestgreen"),
breaks = c("true_sens_998",
"true_sens_995",
"true_sens_990",
"true_sens_985",
"true_sens_980")) +
labs(title="Detecting Deviation in Sensitivity from p=.998", x="n", y="Power") +
theme_bw()
data.frame(
n = possible_sample_sizes,
sens_998_power=sens_calculations_2[[4]],
sens_995_power=sens_calculations_2[[5]],
sens_990_power=sens_calculations_2[[1]],
sens_985_power=sens_calculations_2[[2]],
sens_980_power=sens_calculations_2[[3]]
) %>%
filter(n %in% c(600, 1000, 2000, 3000, 4000))
power_neighborhood <- function(neighborhood,
power_config) {
potential_sample_sizes <- seq(sample_size - neighborhood,
sample_size + neighborhood,
by = 1)
power <- sapply(potential_sample_sizes,
FUN = function(x)
power_calc(
sample_size = power_config$sample_size,
true_prob = power_config$true_prob,
requirement = power_config$requirement,
requirement_type = power_config$requirement_type,
alpha = power_config$alpha,
interval_type = power_config$interval_type,
interval_surpasses = power_config$interval_surpasses)$power)
output_df <- data.frame(
n = potential_sample_sizes,
power = power
)
baseline_power <- output_df[output_df$n == sample_size, "power"],
higher_power_df <- output_df[output_df$power > baseline_power,]
if (nrow(higher_power_df) > 0) {
min_surpassing_sample_size <- min(higher_power_df$n)
} else {
min_surpassing_sample_size <- sample_size
}
return(list(
baseline_power = baseline_power,
higher_power_df = higher_power_df,
min_surpassing_sample_size = sample_size))
}
power_neighborhood <- function(neighborhood,
power_config) {
potential_sample_sizes <- seq(sample_size - neighborhood,
sample_size + neighborhood,
by = 1)
power <- sapply(potential_sample_sizes,
FUN = function(x)
power_calc(
sample_size = power_config$sample_size,
true_prob = power_config$true_prob,
requirement = power_config$requirement,
requirement_type = power_config$requirement_type,
alpha = power_config$alpha,
interval_type = power_config$interval_type,
interval_surpasses = power_config$interval_surpasses)$power)
output_df <- data.frame(
n = potential_sample_sizes,
power = power
)
baseline_power <- output_df[output_df$n == sample_size, "power"]
higher_power_df <- output_df[output_df$power > baseline_power,]
if (nrow(higher_power_df) > 0) {
min_surpassing_sample_size <- min(higher_power_df$n)
} else {
min_surpassing_sample_size <- sample_size
}
return(list(
baseline_power = baseline_power,
higher_power_df = higher_power_df,
min_surpassing_sample_size = sample_size))
}
library(devtools)
library(roxygen2)
devtools::document()
library(nicks)
possible_sample_sizes <- seq(500, 4000, by=10)
possible_sample_sizes <- seq(500, 4000, by=10)
lapply(c(.990, .985, .980),
FUN = function(x) sapply(
possible_sample_sizes,
FUN = function(y)
power_calc(sample_size = y,
true_prob = x,
requirement=.995,
alpha=.05*2,
requirement_type="gt",
interval_type="cp",
interval_surpasses=FALSE)$power
)) -> sens_calculations
sens_calculations
power_calc(sample_size = 1000,
true_prob = .90,
requirement=.995,
alpha=.05*2,
requirement_type="gt",
interval_type="cp",
interval_surpasses=FALSE)$power
power_calc(sample_size = 1000,
true_prob = .99,
requirement=.995,
alpha=.05*2,
requirement_type="gt",
interval_type="cp",
interval_surpasses=FALSE)$power
power_calc(sample_size = 1000,
true_prob = .99,
requirement=.995,
alpha=.05*2,
requirement_type="gt",
interval_type="cp",
interval_surpasses=FALSE)
power_calc(sample_size = 1000,
true_prob = .99,
requirement=.995,
alpha=.05*2,
requirement_type="gt",
interval_type="cp",
interval_surpasses=FALSE)$power_config
power_calc(sample_size = 1000,
true_prob = .99,
requirement=.995,
alpha=.05*2,
requirement_type="gt",
interval_type="cp",
interval_surpasses=FALSE)$power_config -> power_config
power_neighborhood(neighborhood=10, power_config = power_config)
power_config
power_neighborhood <- function(neighborhood,
power_config) {
potential_sample_sizes <- seq(power_config$sample_size - neighborhood,
power_config$sample_size + neighborhood,
by = 1)
power <- sapply(potential_sample_sizes,
FUN = function(x)
power_calc(
sample_size = power_config$sample_size,
true_prob = power_config$true_prob,
requirement = power_config$requirement,
requirement_type = power_config$requirement_type,
alpha = power_config$alpha,
interval_type = power_config$interval_type,
interval_surpasses = power_config$interval_surpasses)$power)
output_df <- data.frame(
n = potential_sample_sizes,
power = power
)
baseline_power <- output_df[output_df$n == sample_size, "power"]
higher_power_df <- output_df[output_df$power > baseline_power,]
if (nrow(higher_power_df) > 0) {
min_surpassing_sample_size <- min(higher_power_df$n)
} else {
min_surpassing_sample_size <- sample_size
}
return(list(
baseline_power = baseline_power,
higher_power_df = higher_power_df,
min_surpassing_sample_size = sample_size))
}
power_neighborhood(neighborhood=10, power_config = power_config)
power_neighborhood <- function(neighborhood,
power_config) {
potential_sample_sizes <- seq(power_config$sample_size - neighborhood,
power_config$sample_size + neighborhood,
by = 1)
power <- sapply(potential_sample_sizes,
FUN = function(x)
power_calc(
sample_size = power_config$sample_size,
true_prob = power_config$true_prob,
requirement = power_config$requirement,
requirement_type = power_config$requirement_type,
alpha = power_config$alpha,
interval_type = power_config$interval_type,
interval_surpasses = power_config$interval_surpasses)$power)
output_df <- data.frame(
n = potential_sample_sizes,
power = power
)
baseline_power <- output_df[output_df$n == sample_size, "power"]
higher_power_df <- output_df[output_df$power > baseline_power,]
if (nrow(higher_power_df) > 0) {
min_surpassing_sample_size <- min(higher_power_df$n)
} else {
min_surpassing_sample_size <- power_config$sample_size
}
return(list(
baseline_power = baseline_power,
higher_power_df = higher_power_df,
min_surpassing_sample_size = sample_size))
}
power_neighborhood(neighborhood=10, power_config = power_config)
power_neighborhood <- function(neighborhood,
power_config) {
potential_sample_sizes <- seq(power_config$sample_size - neighborhood,
power_config$sample_size + neighborhood,
by = 1)
power <- sapply(potential_sample_sizes,
FUN = function(x)
power_calc(
sample_size = power_config$sample_size,
true_prob = power_config$true_prob,
requirement = power_config$requirement,
requirement_type = power_config$requirement_type,
alpha = power_config$alpha,
interval_type = power_config$interval_type,
interval_surpasses = power_config$interval_surpasses)$power)
output_df <- data.frame(
n = potential_sample_sizes,
power = power
)
baseline_power <- output_df[output_df$n == power_config$sample_size, "power"]
higher_power_df <- output_df[output_df$power > baseline_power,]
if (nrow(higher_power_df) > 0) {
min_surpassing_sample_size <- min(higher_power_df$n)
} else {
min_surpassing_sample_size <- power_config$sample_size
}
return(list(
baseline_power = baseline_power,
higher_power_df = higher_power_df,
min_surpassing_sample_size = sample_size))
}
power_neighborhood(neighborhood=10, power_config = power_config)
power_neighborhood <- function(neighborhood,
power_config) {
potential_sample_sizes <- seq(power_config$sample_size - neighborhood,
power_config$sample_size + neighborhood,
by = 1)
power <- sapply(potential_sample_sizes,
FUN = function(x)
power_calc(
sample_size = x,
true_prob = power_config$true_prob,
requirement = power_config$requirement,
requirement_type = power_config$requirement_type,
alpha = power_config$alpha,
interval_type = power_config$interval_type,
interval_surpasses = power_config$interval_surpasses)$power)
output_df <- data.frame(
n = potential_sample_sizes,
power = power
)
baseline_power <- output_df[output_df$n == power_config$sample_size, "power"]
higher_power_df <- output_df[output_df$power > baseline_power,]
if (nrow(higher_power_df) > 0) {
min_surpassing_sample_size <- min(higher_power_df$n)
} else {
min_surpassing_sample_size <- power_config$sample_size
}
return(list(
baseline_power = baseline_power,
higher_power_df = higher_power_df,
min_surpassing_sample_size = sample_size))
}
power_neighborhood(neighborhood=10, power_config = power_config)
power_config$sample_size
power_neighborhood <- function(neighborhood,
power_config) {
potential_sample_sizes <- seq(power_config$sample_size - neighborhood,
power_config$sample_size + neighborhood,
by = 1)
power <- sapply(potential_sample_sizes,
FUN = function(x)
power_calc(
sample_size = x,
true_prob = power_config$true_prob,
requirement = power_config$requirement,
requirement_type = power_config$requirement_type,
alpha = power_config$alpha,
interval_type = power_config$interval_type,
interval_surpasses = power_config$interval_surpasses)$power)
output_df <- data.frame(
n = potential_sample_sizes,
power = power
)
baseline_power <- output_df[output_df$n == power_config$sample_size, "power"]
higher_power_df <- output_df[output_df$power > baseline_power,]
if (nrow(higher_power_df) > 0) {
min_surpassing_sample_size <- min(higher_power_df$n)
} else {
min_surpassing_sample_size <- power_config$sample_size
}
return(list(
baseline_power = baseline_power,
higher_power_df = higher_power_df,
min_surpassing_sample_size = min_surpassing_sample_size))
}
power_neighborhood(neighborhood=10, power_config = power_config)
power_neighborhood(neighborhood=100, power_config = power_config)
library(nicks)
library(tidyverse)
setwd("~/Documents/prospera/prospera_heart_validation/heart_validation_analysis")
selected_cases <- read_csv("../random_sampling/prospera_heart_validation_selected_cases_no_feasibility.csv")
selected_cases
selected_cases$result
selected_cases %>%
filter(result == "reject")
selected_cases %>%
filter(result == "reject") %>%
pull(case_id_blinded)
selected_cases %>%
filter(result == "reject") %>%
pull(case_id_blinded) -> AR_cases
AR_cases
length(AR_cases)
selected_cases %>%
filter(result == "stable") %>%
pull(case_id_blinded) -> stable_cases
stable_cases
length(stable_cases)
blinded_data <- read_csv("prospera_heart_validation_blinded_results.csv")
blinded_data %>%
filter(case_id_blinded %in% AR_cases)
blinded_data %>%
filter(case_id_blinded %in% AR_cases) %>%
pull(resultCode)
blinded_data %>%
filter(case_id_blinded %in% AR_cases) %>%
pull(resultCode) %>% table()
14/19
blinded_data %>%
filter(case_id_blinded %in% stable_cases) %>%
pull(resultCode) %>% table()
65/88
blinded_data %>%
filter(case_id_blinded %in% AR_cases) %>%
pull(resultCode) %>% table()
13/18
clopper_pearson(x=13, n=18, conf.level = .95)
13/18
# Specificity Analysis
blinded_data %>%
filter(case_id_blinded %in% stable_cases) %>%
pull(resultCode) %>% table()
cloppper_pearson(x=65, n=85, conf.level=.95)
clopper_pearson(x=65, n=85, conf.level=.95)
65/85
# Sensitivity Analysis
blinded_data %>%
filter(case_id_blinded %in% AR_cases) %>%
pull(resultCode) %>% table()
blinded_data %>%
filter(resultCode == "NC_TRACER_FAILURE")
blinded_data$resultCode
table(blinded_data$resultCode)
blinded_data %>%
filter(str_detect("NC", result_code))
blinded_data %>%
filter(str_detect("NC*", result_code))
blinded_data %>%
filter(str_detect(result_code, "NC"))
blinded_data %>%
filter(str_detect(resultCode, "NC"))
# Specificity Analysis
blinded_data %>%
filter(case_id_blinded %in% stable_cases) %>%
pull(resultCode) %>% table()
blinded_data %>%
filter(str_detect(resultCode, "[NC|TNP]"))
# Specificity Analysis
blinded_data %>%
filter(case_id_blinded %in% stable_cases) %>%
pull(resultCode) %>% table()
blinded_data %>%
filter(str_detect(resultCode, "[(NC)|(TNP)]"))
blinded_data %>%
filter(str_detect(resultCode, "(NC)|(TNP)"))
blinded_data %>%
filter(case_id_blinded == 3826881)
blinded_data %>%
filter(case_id_blinded %in% c(3826881, 9855898))
selected_cases %>%
filter(result == "reject") %>%
pull(case_id_blinded) -> AR_cases
selected_cases %>%
filter(result == "stable") %>%
pull(case_id_blinded) -> stable_cases
length(AR_cases)
length(stable_cases)
# Sensitivity Analysis
blinded_data %>%
filter(case_id_blinded %in% AR_cases) %>%
pull(resultCode) %>% table()
blinded_data %>%
filter(case_id_blinded %in% c(3826881, 9855898))
blinded_data %>%
filter(case_id_blinded %in% c(3826881, 9855898)) %>%
select(case_id_blinded, resultCode)
blinded_data %>%
filter(case_id_blinded %in% c(3826881, 9855898)) %>%
select(case_id_blinded, sample_truth, resultCode)
blinded_data %>%
filter(case_id_blinded %in% c(3826881, 9855898, 2724685)) %>%
select(case_id_blinded, sample_truth, resultCode)
# Sensitivity Analysis
blinded_data %>%
filter(case_id_blinded %in% AR_cases) %>%
pull(resultCode) %>% table()
clopper_pearson(x=13, n=18, conf.level = .95)
13/18
blinded_data %>%
filter(resultCode == "NC_TRACER_FAILURE")
# NC, QC Failures, TNP
blinded_data %>%
filter(case_id_blinded %in% c(3826881, 9855898, 2724685)) %>%
select(case_id_blinded, sample_truth, resultCode)
# Specificity Analysis
blinded_data %>%
filter(case_id_blinded %in% stable_cases) %>%
pull(resultCode) %>% table()
# Specificity Analysis
blinded_data %>%
filter(case_id_blinded %in% stable_cases) %>%
pull(resultCode) %>% table() %>% sum
# Specificity Analysis
blinded_data %>%
filter(case_id_blinded %in% stable_cases) %>%
pull(resultCode) %>% table()
# NC, QC Failures, TNP
blinded_data %>%
filter(case_id_blinded %in% c(3826881, 9855898, 2724685)) %>%
select(case_id_blinded, sample_truth, resultCode)
# Specificity Analysis
blinded_data %>%
filter(case_id_blinded %in% stable_cases) %>%
pull(resultCode) %>% table()
# Sensitivity Analysis
blinded_data %>%
filter(case_id_blinded %in% AR_cases) %>%
pull(resultCode) %>% table()
# NC, QC Failures, TNP
blinded_data %>%
filter(case_id_blinded %in% c(3826881, 9855898, 2724685)) %>%
select(case_id_blinded, sample_truth, resultCode)
# Specificity Analysis
blinded_data %>%
filter(case_id_blinded %in% stable_cases) %>%
pull(resultCode) %>% table()
65+22
65/87
clopper_pearson(x=65, n=87, conf.level=.95)
blinded_data %>%
filter(case_id_blinded %in% stable_cases) %>%
group_by(case_id_blinded) %>%
count()
blinded_data %>%
filter(case_id_blinded %in% stable_cases) %>%
group_by(case_id_blinded) %>%
count() %>% pull(n) %>% table
# NC, QC Failures, TNP
blinded_data %>%
filter(case_id_blinded %in% c(3826881, 9855898, 2724685)) %>%
select(case_id_blinded, sample_truth, resultCode)
# Sensitivity Analysis
blinded_data %>%
filter(case_id_blinded %in% AR_cases) %>%
pull(resultCode) %>% table()
13/18
65/87
clopper_pearson(x=13, n=18, conf.level = .95)
clopper_pearson(x=65, n=87, conf.level=.95)
65/87
13/18
# Sensitivity Analysis
blinded_data %>%
filter(case_id_blinded %in% AR_cases) %>%
pull(resultCode) %>% table()
# Specificity Analysis
blinded_data %>%
filter(case_id_blinded %in% stable_cases) %>%
pull(resultCode) %>% table()
# Specificity Analysis
blinded_data %>%
filter(case_id_blinded %in% stable_cases) %>%
pull(resultCode) %>% table() %>% sum
library(PropCIs)
exactci(x = 13, n=18, conf.level=.95)
clopper_pearson(x=13, n=18, conf.level = .95)
