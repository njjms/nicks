% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/power_calculation.R
\name{power_calc}
\alias{power_calc}
\title{Power Calculation Function}
\usage{
power_calc(
  sample_size,
  true_prob,
  requirement,
  requirement_type = "gt",
  alpha,
  interval_type = "cp",
  interval_surpasses = FALSE,
  point_surpasses = FALSE
)
}
\arguments{
\item{sample_size}{the total sample size}

\item{true_prob}{the true underlying probability of success}

\item{requirement}{the required underlying probability of success}

\item{requirement_type}{defaults to "gt" (greater than). Can be set to "lt" (less than)}

\item{alpha}{the significance level for a two-sided interval}

\item{interval_type}{defaults to "cp" (Clopper-Pearson). Can be set to "ws" (wilson_score)}

\item{interval_surpasses}{defaults to FALSE, meaning only upper bound has to exceed}

\item{point_surpasses}{defaults to FALSE. TRUE indicates point estimate has to exceed requirement to pass}
}
\value{
list containing parameters of power calculation (float), df of power calculation results, and power (float)
}
\description{
Calculates power in a binomial experiment setting, given a sample size, true_prob, requirement, and significance level.
}
\examples{

lapply(c(.990, .985, .980),
       FUN = function(x) sapply(
         possible_sample_sizes,
         FUN = function(y)
           power_calc(sample_size = y,
                      true_prob = x,
                      requirement=desired_sensitivity,
                      alpha=significance_level*2,
                      requirement_type="gt",
                      interval_type="cp",
                      interval_surpasses=FALSE)$power
         )) -> sens_calculations
ggplot(
data.frame(
	n = possible_sample_sizes,
	sens_990_power=sens_calculations[[1]],
	sens_985_power=sens_calculations[[2]],
	sens_980_power=sens_calculations[[3]]
)) +
geom_line(mapping=aes(x=n, y=sens_990_power,
		  color = "true_sens_990")) +
geom_line(mapping=aes(x=n, y=sens_985_power,
		  color = "true_sens_985")) +
geom_line(mapping=aes(x=n, y=sens_980_power,
		  color = "true_sens_980")) +
scale_color_manual(name="plates",
				   values = c(true_sens_990="dodgerblue1",
							  true_sens_985="firebrick",
							  true_sens_980="forestgreen"),
				   breaks = c("true_sens_990",
							  "true_sens_985",
							  "true_sens_980")) +
labs(title="Detecting Deviation in Sensitivity from p=.995", x="n", y="Power") +
theme_bw()
}
