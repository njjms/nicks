% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predictive_probability.R
\name{predictive_probability}
\alias{predictive_probability}
\title{Bayesian predictive probability calculations}
\usage{
predictive_probability(m, alpha, beta, eta = 0.8, requirement = 0.995)
}
\arguments{
\item{m}{second stage sample size}

\item{alpha}{alpha parameter of beta prior}

\item{beta}{beta parameter of beta prior}

\item{eta}{posterior probability threshold needed to reject, defaults to .8}

\item{requirement}{Requiremnet from PRD, defaults to .995}
}
\value{
a 2-element list containing df of all possible second stage outcomes and final predictive probability
}
\description{
Implementation of a modified version of Zhong & Koopmeiners (2013) sample size reestimation approach.
The original paper details a design which compares two proportions and has an accompanying specification for
the reestimation procedure based on a z-statistic to save computational time.
In the case of one proportion, we can use beta-binomial distribution directly.
}
\details{
Calculation consists of two steps: 1. given a prior identify all possible outcomes in second stage where
posterior probability is greater than some threshold and 2. add beta-binomial derived probabilities for these
outcomes together.
The predictive probability is used to determine a second stage sample size e.g.
try a range of values for m to see which will return a sufficiently high predictive probability.
}
\examples{
x <- 1:1300
y <- sapply(x, FUN = function(x) predictive_probability(m = x,
                                                        alpha= 800.5,
                                                        beta = 2.5)$predictive_probability)
plot(x, y, type = 'l', xlab = "Second stage sample size", ylab = "predictive probability")
abline(h = .8, col="red")
mmax <- 1300
for (m_try in 1:mmax) {
  boop<- predictive_probability(m = m_try,
                                alpha = 180.5,
                                beta = .5)
  if (boop$predictive_probability >= .9) {
    print(paste0("Lowest m is to have predictive probability over 80\%:", m_try))
    break
  }
}
print("Default to mmax.")
}
